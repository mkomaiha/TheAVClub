#!/bin/bash
# backend_db

# Stop on errors
set -e

# Sanity check command line options
usage() {
  echo "Usage: $0 (create|destroy|reset|dump)"
}

if [ $# -ne 1 ]; then
  usage
  exit 1
fi

create() {
  if [ -d "var/uploads" ]; then
   echo "Error: database already exists"
   exit 1
  fi
  echo "+ mkdir -p var/uploads"
  mkdir -p var/uploads

  echo "+ sqlite3 var/backend.sqlite3 < sql/schema.sql"
  sqlite3 var/backend.sqlite3 < sql/schema.sql

  echo "+ sqlite3 var/backend.sqlite3 < sql/data.sql"
  sqlite3 var/backend.sqlite3 < sql/data.sql

  echo "+ cp sql/uploads/* var/uploads/"
  cp sql/uploads/* var/uploads/
}

destroy() {
  echo "+ rm -rf var/backend.sqlite3 var/uploads"
  rm -rf var/backend.sqlite3 var/uploads
}

# Parse argument.  $1 is the first argument
case $1 in
  "create")
    create
    ;;

  "destroy")
    destroy
    ;;

  "reset")
    destroy
    create
    ;;

  "dump")
    echo "+ sqlite3 -batch -line var/backend.sqlite3 'SELECT * FROM patients'"
    sqlite3 -batch -line var/backend.sqlite3 'SELECT * FROM patients'

    echo "+ sqlite3 -batch -line var/backend.sqlite3 'SELECT * FROM sessions'"
    sqlite3 -batch -line var/backend.sqlite3 'SELECT * FROM sessions'

    # echo "+ sqlite3 -batch -line var/backend.sqlite3 'SELECT * FROM likes'"
    # sqlite3 -batch -line var/backend.sqlite3 'SELECT * FROM likes'
    ;;
  *)
    usage
    exit 1
    ;;
esac
